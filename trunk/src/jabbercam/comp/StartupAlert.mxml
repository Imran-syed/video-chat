<?xml version="1.0" encoding="utf-8"?>
<!--
/**
* VIDEOSOFTWARE.PRO
* Copyright 2011 VideoSoftware.PRO
* All Rights Reserved.
*
* This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
*  as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*  See the GNU General Public License for more details.
*  You should have received a copy of the GNU General Public License along with this program.
*  If not, see <http://www.gnu.org/licenses/>.
* 
*  Author: Our small team and fast growing online community at videosoftware.pro
*/
-->
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" width="387" height="252"
	title="Name (or nickname) and Web Camera is required to get started"
	verticalAlign="top" horizontalAlign="center" backgroundColor="#3B5997" color="#3B5997">
	<mx:Metadata>
		[Event(name="valid", type="mx.events.ValidationResultEvent")]
	</mx:Metadata>
	
	<mx:StringValidator id="validator" source="{username}" property="text" trigger="{submit}" triggerEvent="click" required="true"
		requiredFieldError="Enter your Name or Nickname!" minLength="3" tooShortError="The name must be at least 3 characters long"
		valid="checkCamera()" />
	<mx:Form defaultButton="{submit}" paddingTop="10">
		<mx:FormItem>
			<mx:Label id="error" color="#880000"/>
		</mx:FormItem>
		<mx:Text text="Type in your name in the box below than press Enter." color="#B0BAD0" textAlign="center" paddingTop="0"/>
		<mx:HBox horizontalAlign="center" width="100%">
			<mx:FormItem label="Name" required="true" color="#ffffff">
				<mx:TextInput id="username" width="101" color="#3B5997" fontWeight="bold" borderStyle="solid" cornerRadius="4"
							  creationComplete="username_creationCompleteHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem>
				<mx:Button label="ENTER" id="submit" width="71" color="#3B5997"/>
			</mx:FormItem>
		</mx:HBox>
	</mx:Form>
	
	<mx:Text text="Just enter a (nick)name in the box than click &quot;ENTER&quot; to get started. You may click &quot;Open Settings&quot; and set &quot;Allow&quot; and &quot;Remember&quot; before entering the chat." width="306" height="45" color="#B0BAD0" textAlign="center" paddingTop="0"/>
	<mx:LinkButton label="Open Settings" color="#B0BAD0" click="Security.showSettings(SecurityPanel.PRIVACY)"  themeColor="#3B5997"/>
	<mx:HBox visible="{Application.application.socialButtonsLoginScreen}">
		<mx:Button skin="@Embed(source='../assets/facebook.png')" toolTip="{Application.application.lang.facebookTooltip}" click="Application.application.onSocialButtonClick(Application.application.lang.getSetting('facebookLink'))" buttonMode="true" right="10" top="40"/>
		<mx:Button skin="@Embed(source='../assets/googlebuzz.png')" toolTip="{Application.application.lang.buzzTooltip}" click="Application.application.onSocialButtonClick(Application.application.lang.getSetting('buzzLink'))" buttonMode="true" right="10" top="65"/>
		<mx:Button skin="@Embed(source='../assets/twitter.png')" toolTip="{Application.application.lang.twitterTooltip}" click="Application.application.onSocialButtonClick(Application.application.lang.getSetting('twitterLink'))" buttonMode="true" right="10" top="90"/>
		<!--- <mx:Button skin="@Embed(source='../assets/myspace.png')" toolTip="{Application.application.lang.myspaceTooltip}" click="Application.application.onSocialButtonClick(Application.application.lang.getSetting('myspaceLink'))" buttonMode="true" right="10" top="115"/> -->
		<mx:Button skin="@Embed(source='../assets/jabbercam.png')" toolTip="{Application.application.lang.rvcTooltip}" click="Application.application.onSocialButtonClick(Application.application.lang.getSetting('rvcLink'))" buttonMode="true" right="10" top="140"/>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import jabbercam.manager.AbstractCCUserManager;
			import jabbercam.manager.HttpCCUserManager;
			import jabbercam.manager.Red5CCUserManager;
			import jabbercam.manager.events.IdManagerError;
			import jabbercam.manager.events.IdManagerEvent;
			
			import mx.core.Application;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.CursorManager;
			import mx.rpc.CallResponder;
			
			private var manager : AbstractCCUserManager;
			private var conn : NetConnection;
			private var curUrl : String;
			private static var firstTime : Boolean = true;
			
			private var connected : Boolean = false;
			private var blocked : Boolean = false;
			private var banned : Boolean = false;
			
			public static function showSettingsPanel() : void {
				if(firstTime) {
				try {
//					var conn : NetConnection = new NetConnection();
//					conn.connect(null);
//					var ns : NetStream = new NetStream(conn);
//					ns.attachCamera(Camera.getCamera());
					var video : Video = new Video();
					video.attachCamera(Camera.getCamera());
					
				} catch(e : Error) {
					
				}
				}else
				Security.showSettings(SecurityPanel.PRIVACY);
				firstTime = false;
			}
			
			private function checkCamera() : void {
//				if(Camera.names.length == 0 || Camera.getCamera().muted) {
//					error.text = "Camera required!";
//					showSettingsPanel();
//				} else {
					error.text = "";
					username.errorString = "";
					
					if(parentDocument.serverIsRed5) {
						if(!conn) {
							conn = new NetConnection();
							conn.addEventListener(NetStatusEvent.NET_STATUS, onConnectStatus);
							curUrl = parentDocument.connectUrl;
							conn.connect(parentDocument.connectUrl, "JabberCamApp");
							manager = new Red5CCUserManager();
		                	manager.service = conn;
		                	manager.addEventListener(IdManagerEvent.USERNAME_AVAILABLE_RESPONSE, onResponse);
		                	manager.addEventListener("registerFailure", onRegisterFailure);
						} else if(connected && !blocked && !banned) {
							manager.checkUsernameAvailability(username.text);
						}
					} else if(!parentDocument.serverIsRed5) {
						if (!manager) {
							manager = new HttpCCUserManager();
							manager.service = parentDocument.WebServiceUrl;
							manager.register("");
							manager.addEventListener(IdManagerEvent.USERNAME_AVAILABLE_RESPONSE, onResponse);
							manager.addEventListener("registerFailure", onRegisterFailure);
						}
						
						if(!blocked && !banned)
						manager.checkUsernameAvailability(username.text);
					}
					
					cursorManager.setBusyCursor();
//				}
			}
			
			private function onConnectStatus(ev : NetStatusEvent) : void {
				switch(ev.info.code) {
					case "NetConnection.Connect.Rejected":
					case "NetConnection.Connect.Failed":
						if(curUrl == parentDocument.connectUrl && parentDocument.red5ConnectUrlB1 != "") {
	                		curUrl = parentDocument.red5ConnectUrlB1;
	                	} else if(curUrl == parentDocument.red5ConnectUrlB1 && parentDocument.red5ConnectUrlB2 != "") {
	                		curUrl = parentDocument.red5ConnectUrlB2;
	                	} else {
	                		curUrl = "";
	                	}
	                	
	                	if(curUrl != "")
	                	callLater(conn.connect, [curUrl, "JabberCamApp"]);
	                	break;
	                case "NetConnection.Connect.Success":
	                	connected = true;
	                	manager.checkUsernameAvailability(username.text);
				}
			}
			
			private function onResponse(event : IdManagerEvent) : void {
				if(event.value && event.name == username.text) {
					username.errorString = "";
					
					blocked = banned = false;
					if(conn) {
						conn.close();
					}
					conn = null;
					manager = null;
					
					var ev : ValidationResultEvent = new ValidationResultEvent(ValidationResultEvent.VALID);
					dispatchEvent(ev);
				} else if(!event.value) {
					username.errorString = "Username "+event.name+" is already in use. Please type something different.";
				} else if(event.name != username.text) {
					username.errorString = "Press Submit to recheck the new typed in username!";
				}
				
				cursorManager.removeBusyCursor();
			}
			
			private function onRegisterFailure(ev : IdManagerError) : void {
				if(ev.description == "blocked") {
					blocked = true;
					error.text = "Your ip is blocked!";
				} else if(ev.description == "banned") {
					banned = true;
					error.text = "You are banned!";
				}
				CursorManager.removeBusyCursor();
			}

			protected function username_creationCompleteHandler(event:FlexEvent):void
			{
				
				username.text = generateRandomUsername();
			}
			
			static public function generateRandomUsername() : String {
				var name : String = "";
				while(name.length < 6) {
					name += String.fromCharCode(Math.round(Math.random()*25+65));
				}
				name = name.toLowerCase();
				//first character to upper case
				//name = name.charAt(0).toUpperCase()+name.toLowerCase().substring(1);
				
				return name;
			}

		]]>
	</mx:Script>
</mx:Panel>
